pipeline {
  agent any    
  parameters {
       choice(name: 'ENV', choices: ['dev', 'prod'], description: 'Chose Environment') 
  }
  options {
        ansiColor('xterm')  // Gives colored output
  stages {
      stage('VPC') {
          steps {
            dir('VPC') {
              git branch: 'main', url: 'https://github.com/Nagaratnapk/terraform-vpc.git'
              sh "terrafile -f env-${ENV}/Terrafile"  
              sh "terraform init -backend-config=env-${ENV}/${ENV}-backend.tfvars"
              sh "terraform plan -var-file=env-${ENV}/${ENV}.tfvars"
              sh "terraform apply -var-file=env-${ENV}/${ENV}.tfvars -auto-approve"
            }                    
          }
      }

      stage('ALB') {
          steps {
            dir('DB') {
              git branch: 'main', url: 'https://github.com/Nagaratnapk/terraform-loadbalancers.git'
              sh "terrafile -f env-${ENV}/Terrafile"  
              sh "terraform init -backend-config=env-${ENV}/${ENV}-backend.tfvars -reconfigure"
              sh "terraform plan -var-file=env-${ENV}/${ENV}.tfvars"
              sh "terraform apply -var-file=env-${ENV}/${ENV}.tfvars -auto-approve"
             }                    
          }
      }

//       stage('DB') {
//           steps {
//             dir('DB') {
//               git branch: 'main', url: 'https://github.com/Nagaratnapk/terraform-databases.git'
//               sh "terrafile -f env-${ENV}/Terrafile"  
//               sh "terraform init -backend-config=env-${ENV}/${ENV}-backend.tfvars"
//               sh "terraform plan -var-file=env-${ENV}/${ENV}.tfvars"
//               sh "terraform apply -var-file=env-${ENV}/${ENV}.tfvars -auto-approve"
//              }                    
//           }
//       }
//   }
// }